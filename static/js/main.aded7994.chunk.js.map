{"version":3,"sources":["logo.svg","components/header.js","components/imageUploader.js","components/googleMap.js","containers/tripago.js","App.js","reportWebVitals.js","index.js"],"names":["Header","className","Component","instance","axios","create","baseURL","ImageUploader","props","onDrop","pictureFiles","pictureDataURLs","setState","state","pictures","concat","onUpload","a","console","log","post","res","Fragment","withPreview","buttonText","label","onChange","this","imgExtension","buttonClassName","onClick","NTULibrary","lat","lng","NTUSportsCenter","googleMap","renderMarkers","map","maps","Marker","position","bootstrapURLKeys","key","defaultCenter","defaultZoom","onGoogleApiLoaded","yesIWantToUseGoogleMapApiInternals","Tripago","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"6NAAe,I,iCCeAA,G,6KARX,OACE,wBAAQC,UAAU,kBAAlB,SACE,oBAAIA,UAAU,iBAAd,2B,GALaC,c,2DCKfC,EAAWC,IAAMC,OAAO,CAC5BC,QAJe,0BA4CFC,E,kDApCb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,OAAS,SAACC,EAAcC,GACtB,EAAKC,UAAS,SAAAC,GAAK,MAAK,CACtBC,SAAUD,EAAMC,SAASC,OAAOL,QAPjB,EAWnBM,SAXmB,sBAWR,4BAAAC,EAAA,6DACTC,QAAQC,IAAI,4BADH,SAIOhB,EAASiB,KAAK,UAAW,CAAC,KAAQ,YAJzC,OAILC,EAJK,OAKTH,QAAQC,IAAIE,GALH,2CATT,EAAKR,MAAQ,CAAEC,SAAU,IAFR,E,qDAmBT,IAAD,OACP,OACE,eAAC,IAAMQ,SAAP,WACE,cAAC,IAAD,CACEC,aAAa,EACbC,WAAW,gBACXC,MAAM,sBACNC,SAAUC,KAAKlB,OACfmB,aAAc,CAAC,OAAQ,OAAQ,QAC/BC,gBAAgB,2BAElB,wBAAQ5B,UAAU,sBAAsB6B,QAAS,kBAAM,EAAKd,YAA5D,2B,GA/BoBd,a,QCJtB6B,EAAa,CAACC,IAAK,QAASC,IAAK,UACjCC,EAAkB,CAACF,IAAK,QAASC,IAAK,UAgC7BE,E,kDA7Bb,WAAY3B,GAAQ,IAAD,8BACjB,cAAMA,IAIR4B,cAAgB,SAACC,EAAKC,GACP,IAAIA,EAAKC,OAAO,CAC7BC,SAAUN,EACVG,IAAKA,KARY,E,qDAYR,IAAD,OACR,OACE,qBAAKpC,UAAU,aAAf,SACE,cAAC,IAAD,CACEwC,iBAAkB,CAAEC,IAtBP,2CAuBbC,cAAeZ,EACfa,YAAa,GACbC,kBAAmB,gBAAER,EAAF,EAAEA,IAAKC,EAAP,EAAOA,KAAP,OAAiB,EAAKF,cAAcC,EAAKC,IAC5DQ,oCAAkC,U,GArBpB5C,aCWT6C,E,kDAhBb,WAAYvC,GAAQ,uCACZA,G,qDAIN,OACE,eAAC,IAAMc,SAAP,WACE,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,W,GAVcpB,aCOP8C,MARf,WACE,OACE,qBAAK/C,UAAU,MAAf,SACE,cAAC,EAAD,OCISgD,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.aded7994.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, { Component } from 'react'\n\nimport './components.css'\n\nclass Header extends Component {\n\n  render () {\n    return (\n      <header className=\"tripago__header\">\n        <h1 className=\"tripago__title\">Tripago</h1>\n      </header>\n    )\n  }\n}\n\nexport default Header","import React, { Component } from 'react'\nimport axios from 'axios'\nimport ImageUploadField from \"react-images-upload\"\n\nimport './components.css'\n\nconst URL_ROOT = 'http://localhost:4000'\n// const URL_ROOT = 'https://my-tripago.an.r.appspot.com' // GCP App Engine URL\n\nconst instance = axios.create({\n  baseURL: URL_ROOT\n})\n\nclass ImageUploader extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { pictures: [] }; // type: [File,]\n  }\n\n  onDrop = (pictureFiles, pictureDataURLs) => {\n    this.setState(state => ({\n      pictures: state.pictures.concat(pictureFiles)\n    }));\n  }\n\n  onUpload = async () => {\n    console.log('upload images to backend')\n\n\n    let res = await instance.post('/upload', {'data': 'testmsg'})\n    console.log(res)\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <ImageUploadField\n          withPreview={true}\n          buttonText=\"Choose images\"\n          label=\"Max file size = 5mb\"\n          onChange={this.onDrop}\n          imgExtension={[\".jpg\", \".gif\", \".png\"]}\n          buttonClassName=\"image-uploader__button\"\n        />\n        <button className=\"image-upload-button\" onClick={() => this.onUpload() }>Upload</button>\n      </React.Fragment>\n    )\n  }\n}\n\nexport default ImageUploader","import React, { Component } from 'react'\nimport axios from 'axios'\nimport GoogleMap from 'google-map-react'\n\nimport './components.css'\n\n// const GOOGLE_API_KEY = 'idontwanttoshowthemap'\nconst GOOGLE_API_KEY = 'AIzaSyAvh8Dk4QLO0rwBDoFV2_XTkVLYDOkREhE'\n\nconst NTULibrary = {lat: 25.0174, lng: 121.5405}\nconst NTUSportsCenter = {lat: 25.0222, lng: 121.5354}\n\nclass googleMap extends Component {\n  constructor(props) {\n    super(props);\n\n  }\n\n  renderMarkers = (map, maps) => {  // map is the map instance, maps is the maps API object\n    let marker = new maps.Marker({\n    position: NTUSportsCenter,\n    map: map,\n    })\n  }\n\n  render () {\n    return (\n      <div className=\"google-map\">\n        <GoogleMap\n          bootstrapURLKeys={{ key: GOOGLE_API_KEY }}\n          defaultCenter={NTULibrary}\n          defaultZoom={15}\n          onGoogleApiLoaded={({map, maps}) => this.renderMarkers(map, maps)}\n          yesIWantToUseGoogleMapApiInternals\n        >\n        {/* Add Custom Markers Here */}\n        </GoogleMap>\n      </div>\n    )\n  }\n}\n\nexport default googleMap","import React, { Component } from 'react'\n\nimport Header from '../components/header.js'\nimport ImageUploader from '../components/imageUploader.js'\nimport GoogleMap from '../components/googleMap.js'\n\nclass Tripago extends Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n        <Header />\n        <ImageUploader />\n        <GoogleMap />\n      </React.Fragment>\n\n    )\n  }\n}\n\nexport default Tripago","import logo from './logo.svg';\nimport './App.css';\n\nimport Tripago from './containers/tripago.js'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Tripago />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}